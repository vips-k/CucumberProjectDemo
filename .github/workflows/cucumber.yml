name: Run Cucumber CLI with PR Comment

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:

jobs:
  run-cucumber:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
    # Step 1: Check out repository
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Step 2: Set up Java
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: ./gradlew dependencies

    # Step 4: Run Cucumber tests
    - name: Run Cucumber tests
      run: ./gradlew cucumberCli

    # Step 5: Generate Allure Report
    - name: Generate Allure Report
      run: ./gradlew allureReport

    # Step 6: Take Screenshot of Summary Page (Optional)
    - name: Take screenshot of Allure Summary
      run: |
        npm install -g puppeteer # Install Puppeteer
        node <<'EOF'
        const puppeteer = require('puppeteer');
        (async () => {
          const browser = await puppeteer.launch();
          const page = await browser.newPage();
          await page.goto('file://${{ github.workspace }}/build/reports/allure-report/index.html');
          await page.screenshot({ path: 'allure-summary.png' });
          await browser.close();
        })();
        EOF

    # Step 7: Upload Screenshot as Artifact
    - name: Upload Allure Summary Screenshot
      uses: actions/upload-artifact@v3
      with:
        name: allure-summary
        path: allure-summary.png

    # Step 8: Add PR Comment
    - name: Comment on PR with Allure Summary
      if: always() # Ensure this runs even if tests fail
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const allureSummaryURL = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}/artifacts`;
          const commentBody = `
          ## ðŸ§ª Test Results (Allure Report)
          ![Allure Summary](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/artifacts/${{steps.upload-artifact.outputs.artifact-id}}/allure-summary.png)

          [View Full Allure Report Artifact](${allureSummaryURL})

          _This comment was automatically generated by the workflow._
          `;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: commentBody
          });