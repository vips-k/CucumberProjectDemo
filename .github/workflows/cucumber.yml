name: Run Cucumber CLI with PR Comment

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:

jobs:
  run-cucumber:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
    # Step 1: Check out repository
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Step 2: Set up Java
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: ./gradlew dependencies

    # Step 4: Run Cucumber tests
    - name: Run Cucumber tests
      run: ./gradlew cucumberCli

    # Step 5: Generate Allure Report
    - name: Generate Allure Report
      run: ./gradlew allureReport

    # Step 6: Install Node.js dependencies (Fix for xml2js)
    - name: Install Node.js dependencies
      run: npm install xml2js

    # Step 6: Parse JUnit XML and Add PR Comment
    - name: Parse JUnit XML and Comment on PR
      if: always() # Ensure this runs even if tests fail
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const xml2js = require('xml2js');
          const parser = new xml2js.Parser();
          
          try {
            const xmlData = fs.readFileSync('./build/test-results/test.xml', 'utf-8');
            console.log('XML Data:', xmlData); // Debugging: Log XML content
          
            parser.parseStringPromise(xmlData).then(result => {
              console.log('Parsed Result:', result); // Debugging: Log parsed result
          
              if (!result.testsuites || !result.testsuites.testsuite) {
                throw new Error('Invalid XML structure: Missing "testsuites" or "testsuite"');
              }
          
              const testSuite = result.testsuites.testsuite[0];
              const totalTests = testSuite.$.tests;
              const failures = testSuite.$.failures;
              const time = testSuite.$.time;
          
              const prNumber = context.payload.pull_request.number;
              const commentBody = `
              ## ðŸ§ª Test Results (JUnit Report)
              - **Total Tests**: ${totalTests}
              - **Failures**: ${failures}
              - **Execution Time**: ${time} seconds
          
              _This comment was automatically generated by the workflow._
              `;
          
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }).catch(err => {
              console.error('Failed to parse JUnit XML:', err);
            });
          } catch (err) {
            console.error('Error reading or parsing JUnit XML:', err);
          }
